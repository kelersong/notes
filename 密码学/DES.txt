DES是一种对称密钥的块加密算法。
“块加密”亦称“分组加密”
DES 的功能是：给定一个 64 位的明文和一个 64 位的密钥，输出一个 64 位的密文
如果明文长度不是 8 个字节的倍数，还得进行填充。
此外，独立地对每个块加密，最后直接拼起来是不行的（这种方式称为“电子密码本”，ECB 模式。它会导致明文中重复的块，加密结果也重复
可以看到整个算法分为两大部分——迭代加密（左边的 16 轮迭代操作），以及密钥调度（右边生成子密钥的算法）。

　　所谓密钥调度，就是从一把 64-bit 的主钥匙，得到 16 把 48-bit 的子钥匙，然后把这些子钥匙用于迭代加密。那么，如何从一把主钥匙得到 16 把子钥匙呢？

从 64-bit 的主钥匙里面选取特定的 56 位，其余的位就没用了。于是我们现在手上有了一个 56 位的布尔数组。把它分成左、右两个半密钥，它们都是 28-bit 的布尔数组。
左、右两个半密钥都左旋（也就是循环左移。整个数组往左移，左边弹出去了的东西补到最右边去）一定位数，这个左移的位数也是指定的。有些轮次是 1 位，有些轮次是 2 位。
把左、右半密钥拼起来，再做一个置换，就得到了这一轮生成的子密钥。这个置换是从 56-bit 的数组里面选取指定的 48 位。所以现在每一轮都可以生成一个 48 位的子密钥。（注意，步骤 3 并不改变左右半密钥）。
重复 步骤 2、步骤 3 一共 16 次，于是得到了 16 个 48-bit 的子密钥。
　　现在我们手上有了 16 把子密钥。遂开始加密：

输入的明文（长度为 64 的布尔数组）做一个置换(IP置换)。仍然得到 64-bit 的数组（不然就丢失信息了！）
把得到的数组拆成左、右两半边。每边是 32 位长度。
每一轮迭代，都是接收一组 L, R，返回 L', R' ，作为下一轮迭代的 L, R . 迭代过程如下：
 
其中 
 函数（称为轮函数）是整个算法的核心，功能是：以一个子密钥，加密 32-bit 的信息。
利用之前得到的 16 个子密钥，执行步骤 3 一共 16 次。
将最终的 R 与 L 拼接，再做一次置换(FP置换)，即得到密文。